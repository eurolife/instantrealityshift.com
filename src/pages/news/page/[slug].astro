---
import Pagination from "@/components/Pagination.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import CallToAction from "@/partials/CallToAction.astro";
import PostsWithPageHeader from "@/partials/PostsWithPageHeader.astro";
import { getEntry, type CollectionEntry } from "astro:content";
const COLLECTION_FOLDER = "news";
const { slug } = Astro.params;
const posts = await getSinglePage(COLLECTION_FOLDER);
const postIndex = (await getEntry(
  COLLECTION_FOLDER,
  "-index"
)) as CollectionEntry<"news">;
const headingContent = postIndex.data.hero;
const sortedPosts = sortByDate(posts);
const totalPages = Math.ceil(posts.length / config.settings.pagination);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);

export async function getStaticPaths() {
  const COLLECTION_FOLDER = "news";
  const posts = await getSinglePage(COLLECTION_FOLDER);
  const totalPages = Math.ceil(posts.length / config.settings.pagination);
  const paths = [];

  for (let i = 1; i < totalPages; i++) {
    paths.push({
      params: {
        slug: (i + 1).toString(),
      },
    });
  }
  return paths;
}
---

<Base
  title={postIndex.data.title}
  meta_title={postIndex.data.meta_title}
  image={postIndex.data.image}
  description={postIndex.data.description}
>
  <PostsWithPageHeader
    collectionFolder={COLLECTION_FOLDER}
    pageHeader={headingContent}
    posts={currentPosts}
  />
  <Pagination
    section={COLLECTION_FOLDER}
    currentPage={currentPage}
    totalPages={totalPages}
  />
  <CallToAction />
</Base>
